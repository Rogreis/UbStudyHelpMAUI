@page "/TextFormat"
@using AmadonBlazor.Data;
@using System.Text.Json;
@using UbStandardObjects;
@using UbStandardObjects.Objects;
@inject IJSRuntime JS
@inject TextService Service

@if (@PaperLines != null)
{
    <table class="table-borderless">
        <thead>
            <tr>
                @foreach (string line in @PaperLines.Titles)
                {
                    @((MarkupString)@line)
                }
            </tr>
        </thead>
        <tbody>

            @foreach (string line in @PaperLines.Lines)
            {
                <tr>
                    @((MarkupString)@line)
                </tr>
            }

        </tbody>
    </table>
}


@code {

    [Parameter]
    public PaperText PaperLines { get; set; }

    [Parameter]
    public string Entry { get; set; }

    public class PaperText
    {
        public List<string> Titles { get; set; } = new List<string>();
        public List<string> Lines { get; set; } = new List<string>();
    }

    private string lastEntry = "";

    private async Task<bool> GetParagraphs(string entry)
    {
        if (lastEntry == entry)
        {
            return true;   
        }
        string jason = await TextService.GetHtml(entry);
        var options = new JsonSerializerOptions
            {
                AllowTrailingCommas = true,
                WriteIndented = true,
            };
        PaperLines = JsonSerializer.Deserialize<PaperText>(jason, options);
        lastEntry = entry;
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        bool ret = await GetParagraphs(StaticObjects.Parameters.Entry.Reference);
    }

    protected override async void OnParametersSet()
    {
        if (Entry == null) Entry = StaticObjects.Parameters.Entry.Reference;
        bool ret = await GetParagraphs(Entry);
    }

}
