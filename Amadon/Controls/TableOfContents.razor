@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using Blazorise.TreeView


<h5>Table of contents for</h5>
<h5>@CurrentTranslationTitle:</h5>

@*  Based in:
    https://blazorise.com/docs/extensions/treeview
*@

@if (TocGotFromData)
{
    <TreeView @ref="@treeViewPrimary" Nodes="ItemsPrimary"
          GetChildNodes="@(item => item.Children)"
          HasChildNodes="@(item => item.Children?.Any() == true)"
          @bind-SelectedNode="SelectedNode"
          @bind-ExpandedNodes="expandedNodesPrimary">
        <NodeContent>
            @context.Text
        </NodeContent>
    </TreeView>
}



@code {

    TreeView<ItemForToc> treeViewPrimary;
    private string CurrentTranslationTitle = "";
    IList<ItemForToc> expandedNodesPrimary = new List<ItemForToc>();

    // Output data
    public List<ItemForToc>? TocId1 { get; set; } = null;

    public string TitleTranslation1 { get; set; } = "Primary";


    TOCdata data = new TOCdata();
    bool TocGotFromData = false;

    IEnumerable<ItemForToc> ItemsPrimary = new ItemForToc[0];

    private ItemForToc selectedNode;
    private ItemForToc SelectedNode 
    { 
        get
        {
            return selectedNode;
        }
        set
        {
            ItemForToc item = value;
            item.Expanded = true;
            AmadonEvents.NewTocEntry(item.Entry);
            selectedNode = value;
        }
    }

    /// <summary>
    /// Recursively search for an item in the tree items
    /// </summary>
    /// <param name="items"></param>
    /// <returns></returns>
    private ItemForToc FindItemByTocEntry(List<ItemForToc> items, List<ItemForToc> selectedNodes)
    {
        if (items == null) return null;
        foreach (var item in items)
        {
            if (item.Entry * StaticObjects.Parameters.Entry)
            {
                selectedNodes.Add(item);
                return item;
            }
            var foundInChildren = FindItemByTocEntry(item.WorkChildren, selectedNodes);
            if (foundInChildren != null)
            {
                selectedNodes.Add(item);
                return foundInChildren;
            }
        }
        return null;
    }

    public async Task UpdateAll()
    {
        // Needs update?
        data.UpdateTocId1 = data.TranslationId1 != StaticObjects.Book.GetTocSearchTranslation().LanguageID;

        if (!data.UpdateTocId1)
        {
            // TOC already created
            return;
        }
        data.TranslationId1 = StaticObjects.Book.GetTocSearchTranslation().LanguageID;
        data = await TOC_Service.GetTocTable(data);
        ItemsPrimary = data.TocId1;
        List<ItemForToc> selectedNodes = new List<ItemForToc>();
        ItemForToc item = FindItemByTocEntry(ItemsPrimary.ToList(), selectedNodes);
        if (item != null)
        {
            item.Expanded = true;
            SelectedNode = item;
            expandedNodesPrimary = new List<ItemForToc>();
            selectedNodes.Reverse();
            foreach (ItemForToc itemReverted in selectedNodes)
            {
                itemReverted.Expanded = true;
                expandedNodesPrimary.Add(itemReverted);
            }

        }
        TocGotFromData = true;
        StateHasChanged();
    }


    private void TranslationTocChanged()
    {
        Task.Run(async () => await UpdateAll()).GetAwaiter().GetResult();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AmadonEvents.OnTranslationTocChanged += TranslationTocChanged;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CurrentTranslationTitle = StaticObjects.Book.GetTocSearchTranslation().Description;
            await UpdateAll();
        }
    }

}
