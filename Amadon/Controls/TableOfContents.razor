@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using Blazorise.TreeView


<link href="_content/Blazorise.TreeView/blazorise.treeview.css" rel="stylesheet" />


@*  Based in: 
    https://blazorise.com/docs/extensions/treeview
*@


<TreeView @ref="@treeViewTranslation1" Nodes="Items"
          GetChildNodes="@(item => item.Children)"
          HasChildNodes="@(item => item.Children?.Any() == true)"
          @bind-SelectedNode="selectedNode"
          @bind-ExpandedNodes="expandedNodes">
    <NodeContent>
        @context.Text
    </NodeContent>
</TreeView>


@*@foreach(Item item in Items)
{
    <p>PART @item.Text</p>
    @foreach (Item item2 in item.Children)
    {
        <p><Blockquote>DOC @item2.Text</Blockquote></p>
        @foreach (Item item3 in item2.Children)
        {
            <p><Blockquote><Blockquote>SEC @item3.Text</Blockquote></Blockquote></p>
        }
    }
}
*@

@code{

    public class Item
    {
        public string Text { get; set; } = "";
        public List<Item> Children { get; set; } = new List<Item>();
        public override string ToString()
        {
            return $"{Text}{Children?.ToList().Count}";
        }
    }

    TreeView<Item> treeViewTranslation1;
    TOCdata data = new TOCdata();

    IList<Item> expandedNodes = new List<Item>();
    Item selectedNode;

    private void GetPartPapersSections(TOC_Entry entry, List<Item> children)
    {
        foreach (TOC_Entry entryPaper in entry.Papers)
        {
            Item itemPaper = new Item();
            itemPaper.Text = entry.Text;
            children.Add(itemPaper);

            foreach (TOC_Entry entrySection in entryPaper.Sections)
            {
                Item itemSection = new Item();
                itemPaper.Children.Add(itemSection);
                itemSection.Text = entrySection.Text;
            }
        }
    }


    public IEnumerable<Item> Items
    {
        get
        {
            List<Item> itens = new List<Item>();
            try
            {
                Item[] itemPart = new Item[5];

                if (data.Toc != null)
                {
                    int indPart = 0;
                    foreach (TOC_Entry entry in data.Toc.Parts)
                    {
                        itemPart[indPart] = new Item();
                        itemPart[indPart].Text = entry.Text;
                        itens.Add(itemPart[indPart]);
                        GetPartPapersSections(entry, itemPart[indPart].Children);
                        indPart++;
                    }
                }
                return itens;

            }
            catch (Exception ex)
            {
                string xxx = ex.Message;
                return itens;
            }
 
            //    List<Item> items = new List<Item>();
            //    if (Toc != null)
            //    {
            //        foreach (TOC_Entry part in Toc.Parts)
            //        {
            //            Item item = new Item();
            //            item.Text = part.Title;
            //            item.Children = Children(part);
            //            items.Add(item);
            //        }
            //    }
            //    return items;
        }

    }

    public async void UpdateAll()
    {
        data.TranslationId1 = StaticObjects.Parameters.LanguageIDLeftTranslation;
        data.TranslationId2 = StaticObjects.Parameters.LanguageIDMiddleTranslation;
        data.TranslationId3 = StaticObjects.Parameters.LanguageIDRightTranslation;
        data= await TOC_Service.GetTocTable(data);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateAll();
        await base.OnInitializedAsync();
    }


}
