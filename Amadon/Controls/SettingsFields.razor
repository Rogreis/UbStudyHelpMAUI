@using AmadonStandardLib.Classes;
@using System.Diagnostics;
@using AmadonStandardLib.Helpers;


<div class="row">
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchMiddleTranslation LabelText="Show Middle Translation" IsToggled=@parameters.ShowMiddle SwitchType=(int)SwitchType.ShowMiddleTranslation />
    </div>
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchRightTranslation LabelText="Show Right Translation" IsToggled=@parameters.ShowRight SwitchType=(int)SwitchType.ShowRightTranslation />
    </div>
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchCompare LabelText="Show Compare" IsToggled=@parameters.ShowCompare SwitchType=(int)SwitchType.ShowCompare />
    </div>
</div>

<div class="row">
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchDarkMode LabelText="Dark Mode" IsToggled=@parameters.UseDarkThemme SwitchType=(int)SwitchType.UseDarkTheme />
    </div>
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchParNumber LabelText="Show Paragraph Numnber" IsToggled=@parameters.ShowParagraphIdentification SwitchType=(int)SwitchType.ShowParagraphIdentification />
    </div>
    <div class="col-sm-4">
        <SwitchControl @ref=SwitchSerifFont LabelText="Use Serif Font" IsToggled=@parameters.ShowCompare SwitchType=(int)SwitchType.UseSerifFont />
    </div>
</div>


<div class="row">
    <div class="col-sm-4">
        <TranslationListControl @ref="leftTranslationCombo" Title="Left Translation" ComboValue="0"></TranslationListControl>
    </div>
    <div class="col-sm-4">
        <TranslationListControl @ref="middleTranslationCombo" Title="Middle Translation" ComboValue="37"></TranslationListControl>
    </div>
    <div class="col-sm-4">
        <TranslationListControl @ref="rightTranslationCombo" Title="Right Translation" ComboValue="34"></TranslationListControl>
    </div>
</div>

<div class="row">
    <div class="col-sm-4">
        <NumberControl LabelText="Search Page Size" MinValue="10" MaxValue="100" Value=@parameters.SearchPageSize></NumberControl>
    </div>
    <div class="col-sm-4">
        <NumberControl LabelText="Max Search Expression Stored" MinValue="10" MaxValue="100" Value=@parameters.MaxExpressionsStored></NumberControl>
    </div>
    <div class="col-sm-4">
        <NumberControl LabelText="Font Size" MinValue="10" MaxValue="30" Value=@parameters.FontSize></NumberControl>
    </div>
</div>


<div class="row">
    <div class="col-sm-6">
        <button class="btn btn-primary" @onclick="OpenLocalRepository">Local Translation Repository</button>
    </div>
    <div class="col-sm-6">
        <span class="text-nowrap">
            Here you can get some help information and also the source code of this tool:
            <a target="_blank" class="font-weight-bold link-dark" href="https://github.com/Rogreis/UbStudyHelpMAUI">Help && Source Code</a>
        </span>
    </div>
</div>


@code {

    enum SwitchType
    {
        None,
        ShowParagraphIdentification,
        ShowMiddleTranslation,
        ShowRightTranslation,
        ShowCompare,
        UseDarkTheme,
        UseSerifFont
    }


    private Parameters parameters = new Parameters();

    private TranslationListControl leftTranslationCombo;
    private TranslationListControl middleTranslationCombo;
    private TranslationListControl rightTranslationCombo;

    private SwitchControl SwitchParNumber;
    private SwitchControl SwitchMiddleTranslation;
    private SwitchControl SwitchRightTranslation;
    private SwitchControl SwitchCompare;
    private SwitchControl SwitchDarkMode;
    private SwitchControl SwitchSerifFont;

    private bool Initialized = false;

    private string localReporitoryUrl = "";

    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Wait for the button to be rendered
            StateHasChanged();
        }

        if (!Initialized)
        {
            await Task.Delay(1);

            // Replace Windows directory separator character with macOS directory separator character
            localReporitoryUrl = $"file:///{parameters.TUB_Files_RepositoryFolder.Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar)}";
            SwitchParNumber.FieldChanged += SwitchParNumber_FieldChanged;
            SwitchMiddleTranslation.FieldChanged += SwitchParNumber_FieldChanged;
            SwitchRightTranslation.FieldChanged += SwitchParNumber_FieldChanged;
            SwitchCompare.FieldChanged += SwitchParNumber_FieldChanged;
            SwitchDarkMode.FieldChanged += SwitchParNumber_FieldChanged;
            SwitchSerifFont.FieldChanged += SwitchParNumber_FieldChanged;
            Initialized = true;
        }
    }

    private void SwitchParNumber_FieldChanged(object value, int fieldType)
    {
        switch ((SwitchType)fieldType)
        {
            case SwitchType.ShowParagraphIdentification:
                parameters.ShowParagraphIdentification = (bool)value;
                break;
            case SwitchType.UseSerifFont:
                parameters.UseSerifFont = (bool)value;
                break;
            case SwitchType.ShowRightTranslation:
                parameters.ShowRight = (bool)value;
                break;
            case SwitchType.ShowMiddleTranslation:
                parameters.ShowMiddle = (bool)value;
                break;
            case SwitchType.ShowCompare:
                parameters.ShowCompare = (bool)value;
                break;
            case SwitchType.UseDarkTheme:
                parameters.UseDarkThemme = (bool)value;
                break;
        }
        EventsControl.FireRedrawText();
    }

    private Task OpenLocalRepository()
    {
        StaticObjects.OpenLocalFolder(parameters.TUB_Files_RepositoryFolder);
        return Task.CompletedTask;
    }



    private void ThemeChanged(bool isToggled)
    {
        parameters.UseDarkThemme = isToggled;
    }

    public void Initialize()
    {
        parameters = StaticObjects.Parameters;
        leftTranslationCombo.SetValue(parameters.LanguageIDLeftTranslation);
        middleTranslationCombo.SetValue(parameters.LanguageIDMiddleTranslation);
        rightTranslationCombo.SetValue(parameters.LanguageIDRightTranslation);
    }

}
