@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using Amadon.Controls;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.UbClasses;

<div id="rightColumn" class="black splitRight right mt-0 p-0 bg-dark text-white overflow-auto">
    <div class="row overflow-auto">
        @if (@PaperLines != null)
        {
            <table class="table-borderless">
                <thead>
                    <tr>
                        @foreach (string line in @PaperLines.Titles)
                        {
                            @((MarkupString)@line)
                        }
                    </tr>
                </thead>
                <tbody>

                    @foreach (string line in @PaperLines.Lines)
                    {
                        <tr>
                            @((MarkupString)@line)
                        </tr>
                    }

                </tbody>
            </table>
        }
    </div>
</div>



@code {
    private PaperTextFormatted PaperLines { get; set; }

    private LeftColumn LeftControl;


    //[Parameter]
    //public string control { get; set; } = "";

    //[Parameter]
    //public string EntryHref { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LibraryEventsControl.RedrawText += EventsControl_RedrawText;
        AmadonEvents.OnNewTocEntry += OnNewTocEntry;
        AmadonEvents.OnTranslationsToShowChanged += TranslationsToShowChanged;
    }

    protected void EventsControl_RedrawText()
    {
        GetTexts();
        StateHasChanged();
    }

    private void TranslationsToShowChanged()
    {
        GetTexts();
        StateHasChanged();
    }

    public void OnNewTocEntry(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        GetTexts();
        StateHasChanged();
    }


    private async void GetTexts()
    {
        PaperLines = await TextService.GetHtml();
        await Task.Delay(1);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetTexts();
            //await Task.Run(() =>
            //{
            //    GetTexts();

            //});
        }
        StateHasChanged();
    }
}
}
