@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using Amadon.Controls;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.UbClasses;
@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime;


<div id="rightColumn" class="black splitRight right mt-0 p-0 bg-dark text-white overflow-auto">

    <h3>Parameter Value: @ExpressionToHighlight</h3>

    <div class="row overflow-auto">
        @if (@PaperLines != null)
        {
            <Table ElementId="@tableId" Borderless Resizable ResizeMode="TableResizeMode.Columns" FullWidth Class="bg-dark text-white">
            <TableHeader>
                @foreach (string line in @PaperLines.Titles)
                    {
                        @((MarkupString)@line)
                    }
                </TableHeader>
                <TableBody>
                    @foreach (string line in @PaperLines.Lines)
                    {
                        <TableRow>
                            @((MarkupString)@line)
                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
    </div>
</div>


@code {
    private PaperTextFormatted PaperLines { get; set; }

    private LeftColumn LeftControl;

    private string ExpressionToHighlight { get; set; }


    Table MainTextTable;
    const string tableId = "tableText";


    #region Current page search and hightlight functions

    public string HighlightString(string html, string expression)
    {
        if (string.IsNullOrEmpty(expression))
        {
            return html;
        }

        Regex regex = new Regex($"({expression})", RegexOptions.IgnoreCase);
        return regex.Replace(html, $"<span class=\"highlight\">{expression}</span>");
    }

    public string UnhighlightString(string html)
    {
        Regex regex = new Regex("<span class=\"highlight\">(.*?)</span>", RegexOptions.IgnoreCase);
        return regex.Replace(html, "$1");
    }


    protected void OnHighlightExpression(string expression)
    {
        for (int i = 0; i < PaperLines.Titles.Count; i++)
        {
            PaperLines.Lines[i] = UnhighlightString(PaperLines.Lines[i]);
            PaperLines.Lines[i] = HighlightString(PaperLines.Lines[i], expression);
        }
        for (int i = 0; i < PaperLines.Lines.Count; i++)
        {
            PaperLines.Lines[i]= UnhighlightString(PaperLines.Lines[i]);
            PaperLines.Lines[i] = HighlightString(PaperLines.Lines[i], expression);
        }
        StateHasChanged();
    }

    #endregion



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        LibraryEventsControl.RedrawText += EventsControl_RedrawText;
        AmadonEvents.OnNewTocEntry += OnNewTocEntry;
        AmadonEvents.OnTranslationsToShowChanged += TranslationsToShowChanged;
        AmadonEvents.OnHighlightExpression += OnHighlightExpression;
    }

    protected void EventsControl_RedrawText()
    {
        GetTexts();
        StateHasChanged();
    }

    private void TranslationsToShowChanged()
    {
        GetTexts();
        StateHasChanged();
    }

    public void OnNewTocEntry(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        GetTexts();
        StateHasChanged();
    }


    private async void GetTexts()
    {
        PaperLines = await TextService.GetHtml();
        await Task.Delay(1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() =>
            {
                GetTexts();
            });
            StateHasChanged();
        }
    }
}
