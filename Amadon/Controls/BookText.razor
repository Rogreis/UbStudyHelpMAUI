@using Amadon.Controls.Notes
@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using Amadon.Controls;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using System.Diagnostics;
@inject IJSRuntime JSRuntime;


<style>

    .context-menu {
        position: absolute;
        background-color: #ffffff;
        border: 1px solid #ccc;
        z-index: 1000;
        /* more styles */
    }

        .context-menu button {
            display: block; /* Makes each button take up the full width, moving to a new line */
            background: none; /* Remove default background */
            border: none; /* Remove default borders */
            color: blue; /* Text color similar to a typical hyperlink */
            text-decoration: underline; /* Underline similar to hyperlink */
            cursor: pointer; /* Cursor similar to hyperlink */
            padding: 8px 12px; /* Add some padding */
        }

            /* Optional: change appearance on hover */
            .context-menu button:hover {
                background-color: #f0f0f0; /* Light grey background on hover */
            }

    .table-wrapper {
        max-height: calc(100vh - 100px); /* 100px is to leave space for other elements like headers */
        overflow-y: auto;
    }

    #customContextMenu {
        position: absolute;
        width: 100px;
        text-align: center;
        border: 2px solid gold;
    }

    .menuItems {
        list-style: none;
        font-size: 12px;
        padding: 0;
        margin: 0;
    }

        .menuItems .items {
            padding: 5px;
            border-bottom: 1px solid #e6d4b6;
        }

            .menuItems .items:last-child {
                border: none;
            }

            .menuItems .items a {
                text-decoration: none;
                color: white;
            }

</style>



@if (showContextMenu)
{
    string showContextMenuStr = showContextMenu.ToString();
    string posicao = $"top:{ContextMenuY}px;left:{ContextMenuX}px";
    <div style="@($"position:absolute;top:{ContextMenuY}px;left:{ContextMenuX}px; background-color: #ffffff;")" class="context-menu">
        <button @onclick="SelectParagraph">Select this paragraph</button>
        <button @onclick="OpenNotes">Notes</button>
        <button @onclick="SearchHighlighted">Search</button>
    </div>
}

<div id="customContextMenu" class="bg-dark text-white" style="display: none;">
    <ul class="menuItems">
        <li class="items"><a href="#"> Menu Item-1 </a></li>
        <li class="items"><a href="#"> Menu Item-2 </a></li>
        <li class="items"><a href="#"> Menu Item-3 </a></li>
        <li class="items"><a href="#"> Menu Item-4 </a></li>
        <li class="items"><a href="#"> Menu Item-5 </a></li>
        <li class="items"><a href="#"> Menu Item-6</a></li>
    </ul>
</div>

<script>
    // hiding the menu on click to the document
    function hideCustomContextMenu() {
        document.getElementById('customContextMenu').style.display = "none";
    }

    // toggling the menu on right click to the page
    function showCustomContextMenu(event) {
        event.preventDefault();
        var myContextMenu = document.getElementById('customContextMenu');
        if (myContextMenu.style.display == "block") {
            myContextMenu.style.display = "none";
        }
        else {
            myContextMenu.style.display = "block";
            myContextMenu.style.left = event.pageX + "px";
            myContextMenu.style.top = event.pageY + "px";
        }
    }
    document.onclick = hideCustomContextMenu;
    document.oncontextmenu = showCustomContextMenu;
</script>


<div id="rightColumn" class="black splitRight right mt-0 p-0 bg-dark text-white">
    <div class="row">
        @if (@PaperLines != null)
        {
            <Table ElementId="@tableId" Borderless Resizable ResizeMode="TableResizeMode.Columns" FullWidth Class="bg-dark text-white table-wrapper">
                 <TableHeader>
                     @foreach (PaperTitleContent title in @PaperLines.Titles)
                    {
                        <TableHeaderCell>
                            @((MarkupString)@title.ToString())
                        </TableHeaderCell>
                    }
                </TableHeader>
                <TableBody>
                    @foreach (PaperLineContent line in PaperLines.Lines)
                    {
                        if (contParagraphs < PaperLines.Lines.Count)
                        {
                            <TableRow>
                                <TableRowCell>
                                    <Paragraph @ref="@ParagraphsList[contParagraphs, 0]"
                                               ElementId="@line.LeftLine.HtmlId"
                                    @oncontextmenu="((e) => HandleContextMenu(e, ParagraphsList[contParagraphs, 0]))">
                                        @((MarkupString)@line.LeftLine.Htmltext)
                                    </Paragraph>

                                    <!--
                                    builder.AddAttribute(seq++, "oncontextmenu", EventCallback.Factory.Create<MouseEventArgs>(this, (e) => ShowContextMenu(e, paraRef)));
                                    -->
                                </TableRowCell>
                                @if (line.MiddleLine != null)
                                {
                                    <TableRowCell>
                                        <Paragraph @ref="@ParagraphsList[contParagraphs, 1]"
                                                   ElementId="@line.MiddleLine.HtmlId"
                                        @oncontextmenu="((e) => HandleContextMenu(e, ParagraphsList[contParagraphs, 1]))">
                                            @((MarkupString)@line.MiddleLine.Htmltext)
                                        </Paragraph>
                                    </TableRowCell>
                                }
                                @if (line.RightLine != null)
                                {
                                    <TableRowCell>
                                        <Paragraph @ref="@ParagraphsList[contParagraphs, 1]"
                                                   ElementId="@line.RightLine.HtmlId"
                                        @oncontextmenu="((e) => HandleContextMenu(e, ParagraphsList[contParagraphs, 2]))">
                                            @((MarkupString)@line.RightLine.Htmltext)
                                        </Paragraph>
                                    </TableRowCell>
                                }
                            </TableRow>
                            contParagraphs += 1;
                        }
                    }
                </TableBody>
            </Table>
        }

        <HelpModal @ref="ModalHelpControl"></HelpModal>

        <NotesModal @ref="NotesModalControl"></NotesModal>

    </div>

</div>


@code {

    private PaperBookContent PaperLines { get; set; }

    int contParagraphs = 0;

    Blazorise.Paragraph[,] ParagraphsList = new Blazorise.Paragraph[1, 3];


    private string ExpressionToHighlight { get; set; }
    private HelpModal ModalHelpControl;
    private NotesModal NotesModalControl;
    string anchor = "";
    private bool showContextMenu = false;
    private double ContextMenuX = 0;
    private double ContextMenuY = 0;

    const string tableId = "tableText";


    [JSInvokable]
    public static void HandleF1KeyPress()
    {
        // Handle the F1 key press here
        AmadonEvents.HelpContext();
    }

    #region Create Paragraphs

    private async void GetTexts()
    {
        PaperLines = await BookTextService.GetHtml();
        await Task.Delay(1);
        ParagraphsList = new Blazorise.Paragraph[PaperLines.Lines.Count + 2, 3];
        contParagraphs = 0;
        for (int i = 0; i < PaperLines.Lines.Count; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                Blazorise.Paragraph p = new();
                switch (j)
                {
                    case 0:
                        //p.Attributes.Add("HtmlId", PaperLines.Lines[i].LeftLine.HtmlId);
                        ParagraphsList[i, 0] = p;
                        break;
                    case 1:
                        if (PaperLines.Lines[i].MiddleLine != null)
                        {
                            //p.Attributes.Add("HtmlId", PaperLines.Lines[i].MiddleLine.HtmlId);
                            ParagraphsList[i, 1] = p;
                        }
                        break;
                    case 2:
                        if (PaperLines.Lines[i].MiddleLine != null)
                        {
                            //p.Attributes.Add("HtmlId", PaperLines.Lines[i].RightLine.HtmlId);
                            ParagraphsList[i, 2] = p;
                        }
                        break;
                }
            }
        }
    }


    private void HandleClick(MouseEventArgs e, Blazorise.Paragraph paraRef)
    {
    }

    private void HandleContextMenu(MouseEventArgs e, Blazorise.Paragraph p)
    {
        //showContextMenu = true;
        //string id = p.ElementId;
        //string xxxxx = par2.ChildContent.ToString();
        //Task t1 = Task.Run(async () => await GetInnerHtml(id));
        //Task t2 = Task.Run(async () => await GetSelectedText(id));

        //var x1 = innerHtml;
        //var x2 = selectedText;

        return;


        //// Get a reference to the clicked div element (this could be set through other means)

        //// Attach both the context menu and double-click event listeners
        ////Task<ElementReference> t = Task.Run(async () => await JSRuntime.InvokeAsync<ElementReference>("getElementById", id));
        //Task<ElementReference> t = Task.Run(async () => await GetHtmlElementFromId(id));
        //ElementReference elementReference = myElementRef;

        //Task<object> t2 = Task.Run(async () => await GetElementProperties(id));
        //object Properties = elementProperties;


        ////ElementReference clickedDiv = (ElementReference)


        ////// Call the JavaScript function to get the div's absolute position
        ////var position = await JSRuntime.InvokeAsync<ClientRect>("getAbsolutePosition", clickedDiv);

        ////// Calculate where the context menu should appear
        ////x = e.ClientX - position.Left;
        ////y = e.ClientY - position.Top;


        //ContextMenuX = e.ClientX;
        //ContextMenuY = e.ClientY;
        //StateHasChanged(); // Re-render the component



    }


    public void OpenParagraphContextMenu(TOC_Entry entry, int x, int y)
    {
        // Task t3 = Task.Run(async () => await GetTextDivData(id));

        showContextMenu = true;
        ContextMenuX = x;
        ContextMenuY = y;
        StateHasChanged();
    }



    #endregion

    #region Context Menu

    ElementReference myElementRef;
    object elementProperties;


    private async Task<ElementReference> GetHtmlElementFromId(string id)
    {
        myElementRef = await JSRuntime.InvokeAsync<ElementReference>("getElementId", id);
        return myElementRef;
    }

    private async Task<object> GetElementProperties(string id)
    {
        elementProperties = await JSRuntime.InvokeAsync<object>("getElementPropertiesById", id);
        return elementProperties;
    }

    private async Task GetTextDivData(string id)
    {
        await JSRuntime.InvokeVoidAsync("GetTextDivData", id);
    }


    private string innerHtml;
    private string selectedText;

    private async Task GetInnerHtml(string id)
    {
        innerHtml = await JSRuntime.InvokeAsync<string>("GetInnerHtml", id);
    }

    private async Task GetSelectedText(string id)
    {
        selectedText = await JSRuntime.InvokeAsync<string>("GetSelectedText", id);
    }



    [JSInvokable]
    public static void ShowContextMenu(int x, int y)
    {
        AmadonEvents.OpenParagraphContextMenu(null, x, y);
    }

    [JSInvokable]
    public static void HandleDoubleClick(int x, int y)
    {
    }


    #endregion

    #region Current page search and hightlight functions


    private void UnhighlightAll()
    {
        PaperLines.Unhighlight();
        PersistentData.GenericData.HighlightedText = string.Empty;
        StateHasChanged();
    }

    private void OnHighlightExpression(string expression)
    {
        if (!string.IsNullOrEmpty(expression))
        {
            PaperLines.Highlight(expression);
            PersistentData.GenericData.HighlightedText = expression;
            StateHasChanged();
        }
        else
        {
            UnhighlightAll();
        }
    }

    #endregion



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await JSRuntime.InvokeVoidAsync("setupF1KeyListener");
        LibraryEventsControl.RedrawText += EventsControl_RedrawText;
        AmadonEvents.OnNewTocEntry += OnNewTocEntry;
        AmadonEvents.OnNewSubjectIndexEntry += OnNewTocEntry;
        AmadonEvents.OnNewSearchEntry += OnNewTocEntry;
        AmadonEvents.OnNewTrackEntry += OnNewTocEntry;
        AmadonEvents.OnTranslationsToShowChanged += TranslationsToShowChanged;
        AmadonEvents.OnHighlightExpression += OnHighlightExpression;
        AmadonEvents.OnShowHelpPage += ShowHelp;
        AmadonEvents.OnNewParagraphIdent += OnNewParagraphIdent;
        AmadonEvents.OnOpenEditNoteText += OnOpenEditNoteText;
        AmadonEvents.OnOpenParagraphContextMenu += OpenParagraphContextMenu;
    }


    // Actions for the context menu buttons
    private void SelectParagraph()
    {
        showContextMenu = false;
    }

    private void OpenNotes()
    {
        showContextMenu = false;
    }

    private void SearchHighlighted()
    {
        showContextMenu = false;
    }



    private async void JumpToAnchor(TOC_Entry entry)
    {
        await Task.Delay(1);
        await JSRuntime.InvokeVoidAsync("jumpToAnchor", $"{entry.Anchor}");
    }

    private void AddEventListeners()
    {
        foreach (string htmlId in PaperLines.ParagraphsAnchor)
        {
            // Attach both the context menu and double-click event listeners
            Task t = Task.Run(async () => await JSRuntime.InvokeVoidAsync("addMultipleEventListeners", htmlId));
        }
    }

    private void ShowPage()
    {
        GetTexts();
        OnHighlightExpression(PersistentData.GenericData.HighlightedText);
        AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);

        StateHasChanged();
        AddEventListeners();

        JumpToAnchor(StaticObjects.Parameters.Entry);
    }


    protected void ShowHelp(string helpPage)
    {
        ModalHelpControl.ShowModal(helpPage);
        StateHasChanged();
    }


    protected void EventsControl_RedrawText()
    {
        ShowPage();
    }

    private void TranslationsToShowChanged()
    {
        ShowPage();
    }

    public void OnNewTocEntry(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        ShowPage();
    }


    public void OnNewParagraphIdent(TOC_Entry entry)
    {
        StaticObjects.Parameters.Entry = entry;
        ShowPage();
    }

    private void OnOpenEditNoteText(UserNote note, bool readOnly)
    {
        NotesModalControl.ShowEditNotes(note, readOnly);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() =>
            {
                GetTexts();
            });
            AmadonEvents.UpdateParagraphIdent(StaticObjects.Parameters.Entry);
            StateHasChanged();
            AddEventListeners();
        }
    }
}
