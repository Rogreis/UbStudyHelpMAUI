@using Amadon.Services;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;

@if (@paginationVisible)
{
    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = paginationFirst; i <= paginationLast; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
    @*<Container Style="width: 100%; height: 300px; overflow-y: auto;">
    *@

    <Container>
        @foreach (SearchResult result in searchData.SearchResults)
        {
            <p>@result.Text</p>
        }
    </Container>
}


@code
{
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "2";
    private int currentPageNo = 2;
    private int pageItems = 25;
    private int pageItemsNo = 25;
    private int itemsPerPage = 5;
    private int paginationFirst = 1;
    private int paginationLast = 5;
    SearchData searchData= new SearchData();
    private bool paginationVisible= false;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    public async Task<SearchData> CallSearch(SearchData searchData)
    {
        searchData= await SearchBookService.Search(searchData);
        return searchData;
    }


    private void CalculatePagination(string currentPage)
    {
        currentPageNo = Convert.ToInt32(currentPage);
        paginationFirst = Math.Max(1, currentPageNo - 2);
        paginationLast = Math.Min(pageItemsNo, paginationFirst + itemsPerPage - 1);

        searchData = Task.Run(() => CallSearch(searchData)).GetAwaiter().GetResult();
        StateHasChanged();
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
        CalculatePagination(currentPage);
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
        CalculatePagination(currentPage);
    }

    private void SetActive(string page)
    {
        currentPage = page;
        CalculatePagination(currentPage);
    }

    public void Start(SearchData searchData)
    {
        this.searchData = searchData;
        searchData.IndexPathRoot = StaticObjects.Parameters.TubSearchFolders;
        searchData.Translation = StaticObjects.Book.GetTocSearchTranslation();
        paginationVisible = true;
        SetActive("1");
    }

 
}