@using Amadon.Services;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;

@*@using Blazorise.LoadingIndicator;
<LoadingIndicator @ref="loadingIndicator">
</LoadingIndicator>
*@

@if (@PersistentData.SearchData.paginationVisible)
{
    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = PersistentData.SearchData.paginationFirst; i <= PersistentData.SearchData.paginationLast; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
}


@if (PersistentData.SearchData.hasDataToShow)
{
    <p>@PersistentData.SearchData.SearchResults.Count.ToString() paragraph(s) found</p>
    <p>Showing page @PersistentData.SearchData.currentPage of @PersistentData.SearchData.totalPages pages</p>
        <Container>
            @for (int nrItem = PersistentData.SearchData.firstItemToShow; nrItem < PersistentData.SearchData.lastItemToShwow; nrItem++)
            {
                SearchResult result = PersistentData.SearchData.SearchResults[nrItem];
                <p>
                    <Button Color="Color.Primary" Outline Size="Size.Small" Margin="Margin.Is2" Clicked="@(()=> ButtonClicked(@result.LinkText))">@result.ID <Icon Name="IconName.ArrowRight" /></Button>
                    @((MarkupString)@result.Text)
                </p>
            }
        </Container>
}
else
{
    <p>@messageWhenNoSearch</p>
}


@code
{
    // LoadingIndicator loadingIndicator;
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";


    private string messageWhenNoSearch = "";

    private bool IsActive(string page) => PersistentData.SearchData.currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return PersistentData.SearchData.currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return PersistentData.SearchData.currentPage.Equals(PersistentData.SearchData.maxPaginationPages.ToString());
        }
        return false;
    }

    private async Task<bool> CallSearch(SearchData searchData)
    {
        return  await SearchBookService.Search(searchData);
    }

    private void CalculatePagination()
    {
        int currentPageAsInt = Convert.ToInt32(PersistentData.SearchData.currentPage);
        PersistentData.SearchData.hasDataToShow = false;
        PersistentData.SearchData.paginationVisible = false;
        int totalItemsToShow = 0;
        //loadingIndicator.Show();
        messageWhenNoSearch = "Indexing translation to search.";
        if (currentPageAsInt == 1)
        {
            PersistentData.SearchData.ErrorMessage = "";
            bool ret = Task.Run(() => CallSearch(PersistentData.SearchData)).GetAwaiter().GetResult();
        }
        Task.Delay(5000);
        StateHasChanged();
        //loadingIndicator.Hide();


        if (!string.IsNullOrEmpty(PersistentData.SearchData.ErrorMessage))
        {
            PersistentData.SearchData.paginationVisible = false;
            messageWhenNoSearch = PersistentData.SearchData.ErrorMessage;
        }
        else if (PersistentData.SearchData.SearchResults.Count == 0)
        {
            PersistentData.SearchData.paginationVisible = false;
            messageWhenNoSearch = "No paragraph found.";
        }
        else
        {

            totalItemsToShow = PersistentData.SearchData.SearchResults.Count;
            PersistentData.SearchData.firstItemToShow = (currentPageAsInt - 1) * PersistentData.SearchData.maxItemsPerPage + 1;
            PersistentData.SearchData.lastItemToShwow = Math.Min(PersistentData.SearchData.firstItemToShow + PersistentData.SearchData.maxItemsPerPage, totalItemsToShow);
            PersistentData.SearchData.paginationVisible = totalItemsToShow > PersistentData.SearchData.maxItemsPerPage;
            PersistentData.SearchData.totalPages = Math.Ceiling((double)totalItemsToShow / (double)PersistentData.SearchData.maxItemsPerPage).ToString();
            PersistentData.SearchData.hasDataToShow = true;
        }

        int maxPaginas = totalItemsToShow / PersistentData.SearchData.maxItemsPerPage + 1;
        currentPageAsInt = Convert.ToInt32(PersistentData.SearchData.currentPage);
        PersistentData.SearchData.paginationFirst = Math.Max(1, currentPageAsInt - 2);
        PersistentData.SearchData.paginationLast = Math.Min(PersistentData.SearchData.maxPaginationPages, PersistentData.SearchData.paginationFirst + PersistentData.SearchData.maxPaginationItems - 1);

        PersistentData.SearchData.maxItemsPerPage = StaticObjects.Parameters.SearchPageSize;
        StateHasChanged();
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(PersistentData.SearchData.currentPage);
        if (currentPageAsInt > 1)
        {
            PersistentData.SearchData.currentPage = (currentPageAsInt - 1).ToString();
        }
        CalculatePagination();
        StateHasChanged();
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(PersistentData.SearchData.currentPage);
        if (currentPageAsInt < PersistentData.SearchData.maxPaginationPages)
        {
            PersistentData.SearchData.currentPage = (currentPageAsInt + 1).ToString();
        }
        CalculatePagination();
    }

    private void SetActive(string page)
    {
        PersistentData.SearchData.currentPage = page;
        CalculatePagination();
    }

    public void Start()
    {
        PersistentData.SearchData.IndexPathRoot = StaticObjects.Parameters.TubSearchFolders;
        PersistentData.SearchData.Translation = StaticObjects.Book.GetTocSearchTranslation();
        PersistentData.SearchData.Clear();
        SetActive("1");
    }


    protected void ButtonClicked(string option)
    {
        AmadonEvents.NewSearchEntry(TOC_Entry.FromHref(option));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        PersistentData.SearchData.hasDataToShow = PersistentData.SearchData.SearchResults.Count > 0;
        StateHasChanged();
    }


}