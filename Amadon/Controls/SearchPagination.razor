@using Amadon.Services;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Blazorise.LoadingIndicator;

@if (@paginationVisible)
{
    <Pagination>
        <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
            <PaginationLink>
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>
        @{
            for (var i = paginationFirst; i <= paginationLast; i++)
            {
                var pageNumberAsString = i.ToString();
                <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                    <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                        @pageNumberAsString
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
            <PaginationLink>
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
}

@if (hasDataToShow)
{
    <LoadingIndicator @ref="loadingIndicator">
         <Container>
            @for (int nrPage = firstItemToShow; nrPage < lastItemToShwow; nrPage++)
            {
                SearchResult result = searchData.SearchResults[nrPage];
                <p>
                    <Button Color="Color.Primary" Outline Size="Size.Small" Margin="Margin.Is2" Clicked="@(()=> ButtonClicked(@result.LinkText))">@result.ID <Icon Name="IconName.ArrowRight" /></Button>
    @*                <a href="@result.LinkText" onclick="@(() => ButtonClicked(result.LinkText))">result.ID} <i class=\"fas fa-arrow-right\"></i> </a>
                    <a href="@result.LinkText" @onclick:preventDefault @onclick="YourAsyncMethod">@link</a>
    *@
                @((MarkupString)@result.Text)
                </p>
            }
        </Container>
    </LoadingIndicator>
}
else
{
    <p>@messageWhenNoSearch</p>
}


@code
{
    LoadingIndicator loadingIndicator;
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "2";
    private int currentPageNo = 2;

    private int maxPaginationPages = 25; // Max number of pages
    private int maxPaginationItems = 5;  // Max number of pages shown in the pagination
    private int paginationFirst = 1;     // First page number in pagination
    private int paginationLast = 5;      // Last page number in pagination

    private int maxItemsPerPage = 20;    // Max number of items shown per page
    private int firstItemToShow = 1;     // Number of the first search result to show
    private int lastItemToShwow = 20;    // Number of the last search result to show

    SearchData searchData= new SearchData();
    private bool paginationVisible= false;
    private bool hasDataToShow = false;
    private string messageWhenNoSearch = "";

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(maxPaginationPages.ToString());
        }
        return false;
    }

    public async Task<SearchData> CallSearch(SearchData searchData)
    {
        searchData= await SearchBookService.Search(searchData);
        return searchData;
    }


    private void CalculatePagination(string currentPage)
    {
        hasDataToShow = false;
        paginationVisible = false;
        searchData.ErrorMessage = "";
        int totalItemsToShow = 0;
        loadingIndicator.Show();
        messageWhenNoSearch = "Indexing translation to use.";
        searchData = Task.Run(() => CallSearch(searchData)).GetAwaiter().GetResult();
        Task.Delay(5000);
        StateHasChanged();
        loadingIndicator.Hide();


        if (!string.IsNullOrEmpty(searchData.ErrorMessage))
        {
            paginationVisible = false;
            messageWhenNoSearch = searchData.ErrorMessage;
        }
        else if (searchData.SearchResults.Count == 0)
        {
            paginationVisible = false;
            messageWhenNoSearch = "No paragraph found.";
        }
        else
        {
            totalItemsToShow = searchData.SearchResults.Count;
            firstItemToShow = (currentPageNo - 1) * maxItemsPerPage + 1;
            lastItemToShwow = Math.Min(firstItemToShow + maxItemsPerPage, totalItemsToShow);
            paginationVisible = totalItemsToShow > lastItemToShwow;
            hasDataToShow = true;
        }

        LocalStorage.SetItemAsync("SearchData", searchData);

        int maxPaginas = totalItemsToShow / maxItemsPerPage + 1;
        currentPageNo = Convert.ToInt32(currentPage);
        paginationFirst = Math.Max(1, currentPageNo - 2);
        paginationLast = Math.Min(maxPaginationPages, paginationFirst + maxPaginationItems - 1);

        maxItemsPerPage = StaticObjects.Parameters.SearchPageSize;
        StateHasChanged();
    }

    private void Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
        }
        CalculatePagination(currentPage);
    }

    private void Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < maxPaginationPages)
        {
            currentPage = (currentPageAsInt + 1).ToString();
        }
        CalculatePagination(currentPage);
    }

    private void SetActive(string page)
    {
        currentPage = page;
        CalculatePagination(currentPage);
    }

    public void Start(SearchData searchData)
    {
        this.searchData = searchData;
        searchData.IndexPathRoot = StaticObjects.Parameters.TubSearchFolders;
        searchData.Translation = StaticObjects.Book.GetTocSearchTranslation();
        SetActive("1");
    }


    protected void ButtonClicked(string option)
    {
        AmadonEvents.NewSearchEntry(TOC_Entry.FromHref(option));
    }

    protected override async Task OnInitializedAsync()
    {
        searchData = await LocalStorage.GetItemAsync<SearchData>("SearchData");
        if (searchData == null) searchData = new SearchData();
    }

 
}