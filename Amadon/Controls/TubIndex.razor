@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using Blazorise

<h5>Search the subject index titles:</h5>

<TextEdit @ref="TextToSearchObject" Text="@PersistentData.GenericData.TextSearchForIndexTitles" Placeholder="Search the subject index titles..." Size="Size.Small" TextChanged="@OnTextToSearchChanged" />


@if (PersistentData.GenericData.dropdownSubjectTitlesVisible)
{
    <br />
    <label for="select_subject_index">Subject index entries found</label>
    <Select TValue="string" ElementId="select_subject_index" TValue="int" SelectedValueChanged="@NewSubjectIndexItem">
        @foreach (var item in PersistentData.GenericData.IndexItemsFound)
        {
            <SelectItem Value="@item">@item</SelectItem>
        }
    </Select>
    <br />
}

@if (PersistentData.GenericData.browserSubjectsFound)
{
    <div class="row">

        <h3 style="color:gold">@PersistentData.GenericData.TubIndex.Title</h3>


        @foreach (IndexDetails detail in @PersistentData.GenericData.TubIndex.Details)
        {
                <blockquote>
                    @if (detail.DetailType == 2)
                    {
                        <Blazorise.Link Clicked="@(()=> NewSubjectIndex(@detail.Links[0]))">See also</Blazorise.Link>
                    }
                    else
                    {
                        @detail.Text
                        @((MarkupString)@space)
                    }
                    @if (detail.DetailType != 2)
                    {
                        @foreach (string link in detail.Links)
                        {
                            <Blazorise.Link Clicked="@(()=> ButtonClicked(@link))"> @link</Blazorise.Link>
                        }
                    }
                </blockquote>
        }
    </div>
}
<Alert Color="@AlertColor" @bind-Visible="@alertVisible">
    <AlertMessage>
        @AlertMessage
    </AlertMessage>
    <CloseButton />
</Alert>


@code {
    bool alertVisible = false;
    string AlertMessage = "";
    Color AlertColor = Color.Success;
    string space = "&nbsp;";

    TextEdit TextOutputObject;
    TextEdit TextToSearchObject;

    SearchIndexService searchIndex = new SearchIndexService();

    string selectedValue;

    private Task ShowAlert(Color color, string message)
    {
        this.AlertColor = color;
        this.AlertMessage = message;
        this.alertVisible = true;
        return Task.CompletedTask;
    }


    async Task OnTextToSearchChanged(string value)
    {
        //  && string.Compare(PersistentData.GenericData.TextSearchForIndexTitles, value, true) != 0
        PersistentData.GenericData.TextSearchForIndexTitles = value;
        if (!string.IsNullOrEmpty(value) && value.Length >= 3)
        {
            PersistentData.GenericData.IndexItemsFound.Clear();
            LuceneIndexSearch luceneIndex = new LuceneIndexSearch();
            SearchIndexData data = new SearchIndexData();
            data.Query = value;
            data = await SearchIndexService.DoSearch(data);
            if (data == null)
            {
                await ShowAlert(Color.Danger, "Error executing subject index search");
            }
            else if (string.IsNullOrEmpty(data.ErrorMessage))
            {
                PersistentData.GenericData.IndexItemsFound.AddRange(data.ResultsList);
                PersistentData.GenericData.dropdownSubjectTitlesVisible = true;
                if (data.ResultsList.Count == 1)
                {
                    await NewSubjectIndexItem(data.ResultsList[0]);
                }
            }
            else
            {
                await ShowAlert(Color.Danger, data.ErrorMessage);
                PersistentData.GenericData.dropdownSubjectTitlesVisible = false;
            }
            StateHasChanged();
        }
    }


    protected async Task NewSubjectIndexItem(string option)
    {
        PersistentData.GenericData.TubIndex = await SearchIndexService.GetSubjectItemsToShow(option);
        PersistentData.GenericData.browserSubjectsFound = PersistentData.GenericData.TubIndex != null;
    }

    protected void ButtonClicked(string option)
    {
        AmadonEvents.NewSubjectIndexEntry(TOC_Entry.FromHref(option));
    }

    protected void NewSubjectIndex(string subject)
    {
        Task.Run(() => NewSubjectIndexItem(subject));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            StateHasChanged();
        }
    }

}