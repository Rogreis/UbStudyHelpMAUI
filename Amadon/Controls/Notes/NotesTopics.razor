@using Amadon.Services;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@using AmadonStandardLib.UbClasses;
@using Blazorise.DataGrid
@inject IJSRuntime JsRuntime

<h3>Notes Topics</h3>


<DataGrid @ref="@NotesDataGrid" TItem="UserNote"
          Data="@PersistentData.NotesList.Notes"
          @bind-SelectedRow="@selectedUserNote"
          RowContextMenu="@OnRowContextMenu"
          RowContextMenuPreventDefault="true"
          Editable
          Responsive
          ShowPager
          CommandMode="DataGridCommandMode.ButtonRow"
          @onmouseover="AddDoubleClickListener">
    <DataGridColumns>
        <DataGridColumn Field="@nameof(UserNote.Reference)" Caption="Reference" Editable Sortable="true">
        </DataGridColumn>
        <DataGridColumn Field="@nameof(UserNote.Title)" Caption="Title" Editable Sortable="true" />
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Success" Clicked="@(()=> NewNote())">New</Button>
        <Button Color="Color.Primary" Disabled="(selectedUserNote is null)" Clicked="@(()=> EditeNote(selectedUserNote))">Edit</Button>
        <Button Color="Color.Danger" Disabled="(selectedUserNote is null)" Clicked="@(()=> DeleteNote(selectedUserNote))">Delete</Button>
    </ButtonRowTemplate>
</DataGrid>

@if (showContextMenu)
{
    <Div Position="Position.Fixed" Background="Background.Danger" Style="@($"left:{contextMenuPos.X}px;top:{contextMenuPos.Y}px;")">
        <ListGroup>
            <ListGroupItem Clicked="@(()=>OnContextItemEditClicked(contextMenuUserNote))">
                <Icon Name="IconName.Edit" TextColor="TextColor.Secondary" /> Edit
            </ListGroupItem>
            <ListGroupItem Clicked="@(()=>OnContextItemDeleteClicked(contextMenuUserNote))">
                <Icon Name="IconName.Delete" TextColor="TextColor.Danger" /> Delete
            </ListGroupItem>
        </ListGroup>
    </Div>
}


@code{

    private UserNote selectedUserNote;

    private DataGrid<UserNote> NotesDataGrid;

    private bool showContextMenu = false;
    UserNote contextMenuUserNote;
    System.Drawing.Point contextMenuPos;


    private async Task AddDoubleClickListener()
    {
        var dataGridElementId = NotesDataGrid.ElementId;
        await JsRuntime.InvokeVoidAsync("addDoubleClickListener", dataGridElementId, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnRowDoubleClicked(int rowIndex)
    {
        UserNote note = PersistentData.NotesList.Notes.Skip(rowIndex - 1).FirstOrDefault();
        AmadonEvents.OpenEditNoteText(note, true);
    }

    private void NewNote()
    {
        PersistentData.NotesList.Notes.Add(new UserNote() { Entry = StaticObjects.Parameters.Entry, Title = "bla bla 1", Notes = "" });
        NotesDataGrid.Refresh();
        NotesDataGrid.New();
    }

    private void EditeNote(UserNote note)
    {
        NotesDataGrid.Edit(note);
        AmadonEvents.OpenEditNoteText(note, false);
    }


    private void DeleteNote(UserNote note)
    {
        NotesDataGrid.Delete(note);
    }


    protected void OnContextItemEditClicked(UserNote note)
    {
        EditeNote(note);
        showContextMenu = false;
    }

    protected void OnContextItemDeleteClicked(UserNote note)
    {
        DeleteNote(note);
        showContextMenu = false;
    }

    protected Task OnRowContextMenu(DataGridRowMouseEventArgs<UserNote> eventArgs)
    {
        showContextMenu = true;
        contextMenuUserNote = eventArgs.Item;
        contextMenuPos = eventArgs.MouseEventArgs.Client;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}



