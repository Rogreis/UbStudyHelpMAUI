@using Amadon.Controls
@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.InterchangeData;
@inject IJSRuntime JsRuntime


<div class="container-fluid">
<h3>Settings</h3>

<LogControl @ref="logViewer" Visibility=@LogShown></LogControl>

@switch (Status)
{
    case InitializationStatus.InitializedFinished:
        <SettingsFields @ref="fields"></SettingsFields>
        break;
    case InitializationStatus.TranslationError:
    case InitializationStatus.RepositoryError:
        <p></p>
        <div class="alert alert-danger">
            <strong>Error!</strong> Repositories are not running, impossible to show any translation text.  Please click the button below to restart them.
        </div>
        <button class="btn btn-danger" @onclick="TryToFixRepositories">Re-Start Repositories</button>
        break;
    case InitializationStatus.LogError:
    case InitializationStatus.ParametersError:
        <p></p>
        <div class="alert alert-danger">
            <strong>Error!</strong> Repositories are not running, impossible to show any translation text.  Please click the button below to restart them.
        </div>
        <button class="btn btn-danger" @onclick="TryToFixRepositories">Re-Start Repositories</button>
        break;
}

</div>

@code {

    private LogControl logViewer;
    private SettingsFields fields;

    private bool LogShown { get; set; } = true;

    private InitializationStatus Status { get; set; } = InitializationStatus.NotInitialized;

    enum InitializationStatus
    {
        NotInitialized= 0,
        LogError= 1,
        ParametersError= 2,
        RepositoryError= 3,
        TranslationError= 4,
        InitializedFinished= 5
    }



    private void StartShowingData()
    {
        StateHasChanged();
    }

    private async void TryToFixRepositories()
    {
        Status = await DoInitialization(true);
        StateHasChanged();
    }


    private void HandleSendMessage(string Message)
    {
        if (Status == InitializationStatus.InitializedFinished) return;
        logViewer.AppendLogText(Message);
        StateHasChanged();
    }

    private async Task<bool> DoInitializeTranslations()
    {
        EventsControl.SendMessage += HandleSendMessage;
        Diagnostic diagnostic = await InitializationService.InitLeftTranslation(StaticObjects.Parameters.LanguageIDLeftTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitMiddleTranslation(StaticObjects.Parameters.LanguageIDMiddleTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitRightTranslation(StaticObjects.Parameters.LanguageIDRightTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        return true;
    }


    private async Task<InitializationStatus> DoInitialization(bool recreate = false)
    {

        EventsControl.SendMessage += HandleSendMessage;
        bool ret = await InitializationService.InitLooger();
        if (!ret)
        {
            HandleSendMessage("Init logger failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.LogError;
        }


        ret = await InitializationService.InitParameters();
        if (!ret)
        {
            HandleSendMessage("Parameters initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.ParametersError;
        }

        ret = await InitializationService.InitRepositories(recreate);
        if (!ret)
        {
            HandleSendMessage("Repositories initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        ret = await InitializationService.InitTranslations();
        if (!ret)
        {
            HandleSendMessage("Translations list initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        ret = await DoInitializeTranslations();

        HandleSendMessage("Init ok");
        StaticObjects.InitializationDone = true;
        return InitializationStatus.InitializedFinished;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Status = (InitializationStatus)StaticObjects.InitializationStatus;
        if (firstRender)
        {
            if (Status == InitializationStatus.NotInitialized)
            {
                Status = await DoInitialization();
                StaticObjects.InitializationStatus = (int)Status;
            }
            LogShown = Status != InitializationStatus.InitializedFinished;

            // Wait for the button to be rendered
            StateHasChanged();
            await Task.Delay(1);
            switch (Status)
            {
                case InitializationStatus.InitializedFinished:
                    bool ret = await DoInitializeTranslations();
                    fields.Initialize();
                    break;
                case InitializationStatus.TranslationError:
                case InitializationStatus.RepositoryError:
                case InitializationStatus.LogError:
                case InitializationStatus.ParametersError:
                    break;
            }
            StateHasChanged();
            await Task.Delay(1);

            // initialize the JavaScript interop library after the page has loaded
            //await JSRuntime.InvokeAsync<object>("myInteropLibrary.initialize");
        }
    }



}

