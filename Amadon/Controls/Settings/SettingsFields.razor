@using Amadon.Controls.Fields;
@using Amadon.Services;
@using AmadonStandardLib.Classes;
@using System.Diagnostics;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.UbClasses;

<Heading Size="HeadingSize.Is3">Settings</Heading>

@if (SettingsPageInitialized)
{
    <Tooltip Text="Show a translation in the middle column" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchMiddleTranslation LabelText="Show Middle Translation" IsToggled=@parameters.ShowMiddle  />
    </Tooltip>

    <Tooltip Text="Show a translation in the right column" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchRightTranslation LabelText="Show Right Translation" IsToggled=@parameters.ShowRight  />
    </Tooltip>

    <Tooltip Text="Show a comparison column when middle and right translations can be compared" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchCompare LabelText="Show Compare" IsToggled=@parameters.ShowCompare  />
    </Tooltip>

    <Divider />


 @*   <Tooltip Text="Use dark mode" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchDarkMode LabelText="Dark Mode" IsToggled=@parameters.UseDarkThemme SwitchType=(int)SwitchType.UseDarkTheme />
    </Tooltip>
*@
    <Tooltip Text="Show the paragraph identificantion (number and page)" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchParNumber LabelText="Show Paragraph Numnber" IsToggled=@parameters.ShowParagraphIdentification SwitchType=(int)SwitchType.ShowParagraphIdentification />
    </Tooltip>

    <Tooltip Text="Use serif font" Placement="TooltipPlacement.Bottom">
        <SwitchControl @ref=SwitchSerifFont LabelText="Use Serif Font" IsToggled=@parameters.ShowCompare SwitchType=(int)SwitchType.UseSerifFont />
    </Tooltip>


    <Divider />

    <Table>
        <TableRow>
            <TableRowCell>
                <Tooltip Text="Number of items shown in the search tool" Placement="TooltipPlacement.Bottom">
                    <Field>
                        <FieldLabel Class="bg-dark text-white">Search Page Size</FieldLabel>
                        <NumericEdit MinValue="10" MaxValue="100" Value=@parameters.SearchPageSize></NumericEdit>
                    </Field>
                </Tooltip>
            </TableRowCell>
            <TableRowCell>
                <Tooltip Text="Max search and track data stored to be resused" Placement="TooltipPlacement.Bottom">
                    <Field>
                        <FieldLabel Class="bg-dark text-white">Max Expression</FieldLabel>
                        <NumericEdit MinValue="10" MaxValue="100" Value=@parameters.MaxExpressionsStored></NumericEdit>
                    </Field>
                </Tooltip>
            </TableRowCell>
        </TableRow>
    </Table>

    <Divider />

    <br />
    <Tooltip Text="Choose translation for left column" Placement="TooltipPlacement.Bottom">
        <TranslationSelect @ref="TranslationSelectLeft" Label="Left Translation" Id="LeftTrans" SelectedValue="StaticObjects.Parameters.LanguageIDLeftTranslation"></TranslationSelect>
    </Tooltip>
    <br />
    <Tooltip Text="Choose translation for middle column" Placement="TooltipPlacement.Bottom">
        <TranslationSelect @ref="TranslationSelectMiddle" Label="Middle Translation" Id="MiddleTrans" SelectedValue="StaticObjects.Parameters.LanguageIDMiddleTranslation"></TranslationSelect>
    </Tooltip>
    <br />
    <Tooltip Text="Choose translation for right column" Placement="TooltipPlacement.Bottom">
        <TranslationSelect @ref="TranslationSelectRight" Label="Right Translation" Id="RightTrans" SelectedValue="StaticObjects.Parameters.LanguageIDRightTranslation"></TranslationSelect>
    </Tooltip>
    <br />

    <Tooltip Text="Choose translation to be used for table of contents" Placement="TooltipPlacement.Bottom">
        <Label>Translation for Table of Contents</Label>
        <RadioGroup TValue="string" Name="TocTranslations" Buttons  CheckedValueChanged="@OnCheckedValueChanged">
            <Radio Value="@("left")">Use Left</Radio>
            <Radio Value="@("middle")">Use Middle</Radio>
            <Radio Value="@("right")">User Right</Radio>
        </RadioGroup>
    </Tooltip>

}




@code {

    private class SelectTranslation
    {
        public short Id { get; set; }
        public string Descrition { get; set; }
    }

    Task OnCheckedValueChanged(string value)
    {
        checkedValue = value;
        switch(checkedValue)
        {
            case "left":
                StaticObjects.Parameters.TranslationForTableOfContents = StaticObjects.Parameters.LanguageIDLeftTranslation;
                break;
            case "middle":
                StaticObjects.Parameters.TranslationForTableOfContents = StaticObjects.Parameters.LanguageIDMiddleTranslation;
                break;
            case "right":
                StaticObjects.Parameters.TranslationForTableOfContents = StaticObjects.Parameters.LanguageIDRightTranslation;
                break;
        }

        return Task.CompletedTask;
    }


    TranslationSelect TranslationSelectLeft;
    TranslationSelect TranslationSelectMiddle;
    TranslationSelect TranslationSelectRight;


    Select<SelectTranslation> SelectMiddleTranslation;

    SelectTranslation selectedLefteValue;
    SelectTranslation selectedMiddleValue;
    SelectTranslation selectedRightValue;
    bool SettingsPageInitialized = false;
    string checkedValue = "green";

    private List<SelectTranslation> items;

    Task OnSelectedValueChanged(SelectTranslation value)
    {
        selectedMiddleValue = value;

        return Task.CompletedTask;
    }



    enum SwitchType
    {
        None,
        ShowParagraphIdentification,
        ShowMiddleTranslation,
        ShowRightTranslation,
        ShowCompare,
        UseDarkTheme,
        UseSerifFont
    }


    private Parameters parameters = new Parameters();


    private SwitchControl SwitchParNumber;
    private SwitchControl SwitchMiddleTranslation;
    private SwitchControl SwitchRightTranslation;
    private SwitchControl SwitchCompare;
    private SwitchControl SwitchDarkMode;
    private SwitchControl SwitchSerifFont;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && StaticObjects.Parameters.AppInitialized)
        {
            if (!SettingsPageInitialized)
            {
                await Task.Delay(1);
                Initialize();
            }
            StateHasChanged();
        }
    }

    private async Task StoreParameters()
    {
        bool ret = await InitializationService.StoreParameters();
    }

    private void ParameterValueChanged()
    {
        parameters.ShowParagraphIdentification = SwitchParNumber.GetValue();
        parameters.UseSerifFont = SwitchSerifFont.GetValue();
        parameters.ShowMiddle = SwitchMiddleTranslation.GetValue();
        parameters.ShowCompare = SwitchCompare.GetValue();
        parameters.UseDarkThemme = SwitchDarkMode.GetValue();
        bool result = Task.Run(async () => await InitializationService.StoreParameters()).GetAwaiter().GetResult();
        LibraryEventsControl.FireRedrawText();
    }

    public void Initialize()
    {
        parameters = StaticObjects.Parameters;
        items = new List<SelectTranslation>();
        foreach (short id in StaticObjects.Parameters.TranslationsToShowId)
        {
            Translation trans = StaticObjects.Book.GetTranslation(id);
            items.Add(new SelectTranslation() { Id = id, Descrition = trans.Description });
        }

        SettingsPageInitialized = true;



        StateHasChanged();

        TranslationSelectLeft.SetData(StaticObjects.Parameters.LanguageIDMiddleTranslation);
        TranslationSelectMiddle.SetData(StaticObjects.Parameters.LanguageIDMiddleTranslation);
        TranslationSelectRight.SetData(StaticObjects.Parameters.LanguageIDMiddleTranslation);

        SwitchParNumber.SetValue(parameters.ShowParagraphIdentification);
        SwitchMiddleTranslation.SetValue(parameters.ShowMiddle);
        SwitchRightTranslation.SetValue(parameters.ShowRight);
        SwitchCompare.SetValue(parameters.ShowCompare);
        //SwitchDarkMode.SetValue(parameters.UseDarkThemme);
        SwitchSerifFont.SetValue(parameters.UseSerifFont);

        SwitchParNumber.FieldChanged += ParameterValueChanged;
        SwitchMiddleTranslation.FieldChanged += ParameterValueChanged;
        SwitchRightTranslation.FieldChanged += ParameterValueChanged;
        SwitchCompare.FieldChanged += ParameterValueChanged;
        //SwitchDarkMode.FieldChanged += ParameterValueChanged;
        SwitchSerifFont.FieldChanged += ParameterValueChanged;

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AmadonEvents.OnInitializationSuccesfully += Initialize;
    }



}
