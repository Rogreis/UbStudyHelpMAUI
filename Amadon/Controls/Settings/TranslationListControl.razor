@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;
@using AmadonStandardLib.UbClasses;

<div class="input-group input-group-sm mb-3">
    <span class="input-group-text">@Title</span>
    <select class="form-control" @onchange="HandleSelectChange">
        @foreach (var item in Items)
        {
            <option value="@item.Value" "@item.Selected">@item.DisplayText</option>
        }
    </select>
</div>

@code {

    private class SelectListItem
    {
        public string Value { get; set; }
        public string DisplayText { get; set; }
        public string Selected { get; set; } = "";
    }


    private string _selectedValue = "";
    private List<SelectListItem> Items { get; set; }

    public event FieldChangedDelegate FieldChanged = null;

    [Parameter]
    public string Title { get; set; } = "";


    [Parameter]
    public string ComboValue { get; set; } = "0";

    [Parameter]
    public string SelectedValue { get; set; } = "0";



    protected override void OnInitialized()
    {
        base.OnInitialized();

        // initialize the list of items
        Items = new List<SelectListItem>();
        foreach (Translation trans in StaticObjects.Book.Translations)
        {
            Items.Add(new SelectListItem { Value = trans.LanguageID.ToString(), DisplayText = trans.Description });
        }
    }

    private async void WarnOtherPages()
    {
        await Task.Run(() =>
        {
            // Call an async function without waiting for it to complete
            if (FieldChanged != null)
            {
                FieldChanged.Invoke();
            }
        });
        return;
    }

    private void HandleSelectChange(ChangeEventArgs e)
    {
        ComboValue = e.Value.ToString();
        WarnOtherPages();
    }



    public void SetValue(short translationId)
    {
        SelectedValue = translationId.ToString();
    }

    public short GetValue()
    {
        return SelectedValue == null? (short)-1 : Convert.ToInt16(SelectedValue);
    }




}
