@using Amadon.Controls
@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.InterchangeData;
@inject IJSRuntime JsRuntime

@page "/"

<h3>Settings</h3>

<LogControl @ref="logViewer" Visibility=@LogShown></LogControl>

@switch (Status)
{
    case InitializationStatus.InitializedFinished:
        <SettingsFields @ref="fields"></SettingsFields>
        break;
    case InitializationStatus.TranslationError:
    case InitializationStatus.RepositoryError:
        <p></p>
        <div class="alert alert-danger">
            <strong>Error!</strong> Repositories are not running, impossible to show any translation text.  Please click the button below to restart them.
        </div>
        <button class="btn btn-danger" @onclick="TryToFixRepositories">Re-Start Repositories</button>
        break;
    case InitializationStatus.LogError:
    case InitializationStatus.ParametersError:
        <p></p>
        <div class="alert alert-danger">
            <strong>Error!</strong> Repositories are not running, impossible to show any translation text.  Please click the button below to restart them.
        </div>
        <button class="btn btn-danger" @onclick="TryToFixRepositories">Re-Start Repositories</button>
        break;
}



@code {

    private LogControl logViewer;
    private SettingsFields fields;

    private bool LogShown { get; set; } = true;

    private InitializationStatus Status { get; set; } = InitializationStatus.NotInitialized;

    enum InitializationStatus
    {
        NotInitialized,
        LogError,
        ParametersError,
        RepositoryError,
        TranslationError,
        InitializedFinished
    }


    //protected override async Task OnInitializedAsync()
    //{
    //}

    private void StartShowingData()
    {
        StateHasChanged();
    }

    private async void TryToFixRepositories()
    {
        Status = await DoInitialization(true);
        StateHasChanged();
    }


    private void HandleSendMessage(string Message)
    {
        logViewer.AppendLogText(Message);
        StateHasChanged();
    }

    private async Task<InitializationStatus> DoInitialization(bool recreate = false)
    {
        EventsControl.SendMessage += HandleSendMessage;
        bool ret = await InitializationService.InitLooger();
        if (!ret)
        {
            HandleSendMessage("Init logger failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.LogError;
        }


        ret = await InitializationService.InitParameters();
        if (!ret)
        {
            HandleSendMessage("Parameters initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.ParametersError;
        }

        ret = await InitializationService.InitRepositories(recreate);
        if (!ret)
        {
            HandleSendMessage("Repositories initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        ret = await InitializationService.InitTranslations();
        if (!ret)
        {
            HandleSendMessage("Translations list initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        Parameters parameters = await SettingsService.Get();
        ret = await InitializationService.InitTranslation("Left", parameters.LanguageIDLeftTranslation);
        if (!ret)
        {
            HandleSendMessage("Translations list initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        ret = await InitializationService.InitTranslation("Middle", parameters.LanguageIDMiddleTranslation);
        if (!ret)
        {
            HandleSendMessage("Translations list initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }

        ret = await InitializationService.InitTranslation("Right", parameters.LanguageIDRightTranslation);
        if (!ret)
        {
            HandleSendMessage("Translations list initialization failed");
            HandleSendMessage("App cannot be started.");
            return InitializationStatus.RepositoryError;
        }
        HandleSendMessage("Init ok");
        return InitializationStatus.InitializedFinished;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Status = await DoInitialization();
            LogShown = Status != InitializationStatus.InitializedFinished;
            StateHasChanged();

            // Wait for the button to be rendered
            await Task.Delay(1);
            fields.Initialize();

            // initialize the JavaScript interop library after the page has loaded
            //await JSRuntime.InvokeAsync<object>("myInteropLibrary.initialize");
        }
    }



}

