@page "/"
@inject NavigationManager NavigationManager
@using Amadon.Controls
@using Amadon.Controls.Settings
@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;


<h4>The Urantia Book Study help is initializing. Please, wait...</h4>

<LogControl @ref="logViewer"></LogControl>

<button @onclick="NavigateToAbout">Go to Test</button>


<Modal @ref="modalRef">
    <ModalContent Centered Size="ModalSize.Large" Class="text-white bg-dark">
        <ModalHeader>
            <ModalTitle>Make your choice for translations to download and show</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <TranslationsToShow></TranslationsToShow>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@OnModalOk">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>



    @code {

    enum Status
    {
        NotInitialized = 0,
        LogInitialized= 1,
        ParametersInitialized= 2,
        DataFolderVerified= 3,
        WaitingTranslationChoice= 4,
        TranslationsChoiceDone= 5
    }

    private bool showTranslationsOptions = false;

    // reference to the modal component
    private Modal modalRef;

    // Local blazor components
    private LogControl logViewer;

    // Page status control
    private Status InitializationStatus = Status.NotInitialized;


    private void HandleSendMessage(string Message)
    {
        //if (Status == Status.InitializedFinished) return;
        logViewer.AppendLogText(Message);
        Task.Delay(1);
        StateHasChanged();
    }

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task OnModalOk()
    {
        await HideModal();
        // Restart the initialization process with choice for translations already done
        InitializationStatus = Status.TranslationsChoiceDone;
        await DoInitialization();
    }



    #region Initialization

    private async Task<bool> DoInitializeTranslations()
    {
        Diagnostic diagnostic = await InitializationService.InitLeftTranslation(StaticObjects.Parameters.LanguageIDLeftTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitMiddleTranslation(StaticObjects.Parameters.LanguageIDMiddleTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitRightTranslation(StaticObjects.Parameters.LanguageIDRightTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        return true;
    }


    private async Task DoInitialization(bool recreate = false)
    {
        bool ret = false, continues= true;

        while (continues)
        {
            switch (InitializationStatus)
            {
                case Status.NotInitialized:
                    HandleSendMessage("Starting initialization");
                    ret = await InitializationService.InitLooger();
                    if (!ret)
                    {
                        HandleSendMessage("Init logger failed");
                        HandleSendMessage("App cannot be started.");
                        AmadonEvents.SystemInitialized(false);
                        continues = false;
                    }
                    else
                    {
                        HandleSendMessage("Log started.");
                        InitializationStatus = Status.LogInitialized;
                    }
                    break;
                case Status.LogInitialized:
                    ret = await InitializationService.InitParameters();
                    if (!ret)
                    {
                        HandleSendMessage("Parameters initialization failed");
                        HandleSendMessage("App cannot be started.");
                        AmadonEvents.SystemInitialized(false);
                        continues = false;
                    }
                    else
                    {
                        HandleSendMessage("Parameters started.");
                        InitializationStatus = Status.ParametersInitialized;
                    }
                    break;
                case Status.ParametersInitialized:
                    ret = await InitializationService.VerifyDataFolder(recreate);
                    if (!ret)
                    {
                        HandleSendMessage("Repositories initialization failed");
                        HandleSendMessage("App cannot be started.");
                        AmadonEvents.SystemInitialized(false);
                        continues = false;
                    }
                    else
                    {
                        HandleSendMessage("Local copy of translations checked.");
                        InitializationStatus = Status.DataFolderVerified;
                    }
                    break;

                case Status.DataFolderVerified:
                    HandleSendMessage("Local copy of translations checked.");
                    ret = await InitializationService.InitTranslations();
                    if (ret)
                    {
                        if (!StaticObjects.Parameters.TranslationsChoiceDone)
                        {
                            AmadonEvents.TranslationsListInitialized();
                            await ShowModal();
                            return;
                        }
                        else
                        {
                            InitializationStatus = Status.TranslationsChoiceDone;
                        }
                    }
                    InitializationStatus = Status.TranslationsChoiceDone;
                    continues = false;
                    break;

                    // Entry point after modal for translations choice
                case Status.TranslationsChoiceDone:
                    HandleSendMessage("Initializing translations to be used.");
                    ret = await DoInitializeTranslations();
                    if (!ret)
                    {
                        HandleSendMessage("Translations initialization failed");
                        HandleSendMessage("App cannot be started.");
                        continues = false;
                        AmadonEvents.SystemInitialized(false);
                    }
                    HandleSendMessage("Translations initialized.");
                    continues = false;
                    AmadonEvents.SystemInitialized(true);
                    StaticObjects.InitializationDone = true;
                    break;
            }
            StateHasChanged();
        }
        return;
    }

    #endregion


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // Messages coming from library are no more shown
        //LibraryEventsControl.SendMessage += HandleSendMessage;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await ShowModal(ModalSize.Large, 50, true);
            await DoInitialization();
        }
    }

    private void NavigateToAbout()
    {
        NavigationManager.NavigateTo("/test");
    }

}
