@page "/booktext"
@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;

<div class="container-fluid">
    <div id="leftColumn" class="black splitLeft left mt-4 bg_left text-white overflow-auto">
        <p>1111</p>
        <p>2222</p>
        <p>3333</p>
        <p>4444</p>
        <p>5555</p>
    </div>
    <div id="rightColumn" class="black splitRight right mt-0 bg-dark text-white overflow-auto">
            <div class="row overflow-auto">

            @if (@PaperLines != null)
            {
                <table class="table-borderless">
                    <thead>
                        <tr>
                            @foreach (string line in @PaperLines.Titles)
                            {
                                @((MarkupString)@line)
                            }
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (string line in @PaperLines.Lines)
                        {
                            <tr>
                                @((MarkupString)@line)
                            </tr>
                        }

                    </tbody>
                </table>
            }
        </div>
    </div>
</div>



@code {


    [Parameter]
    public string EntryHref { get; set; }

    private PaperTextFormatted PaperLines { get; set; }

    private bool RedrawAsked { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        EventsControl.RedrawText += EventsControl_RedrawText;
    }

    protected void EventsControl_RedrawText()
    {
        RedrawAsked = true;
    }

    private async void GetTexts()
    {
        if (RedrawAsked)
        {
            await Task.Delay(1);
            RedrawAsked = false;
            PaperLines = await TextService.GetHtml();
            RedrawAsked = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            // Wait for the button to be rendered
            GetTexts();
            // initialize the JavaScript interop library after the page has loaded
            //await JSRuntime.InvokeAsync<object>("myInteropLibrary.initialize");
        }
    }


}
