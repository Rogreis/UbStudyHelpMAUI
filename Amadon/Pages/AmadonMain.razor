@page "/xx"
@using Amadon.Controls;
@using AmadonBlazorLibrary.Data;
@using AmadonStandardLib.Classes;
@using AmadonStandardLib.Helpers;

@using Blazorise

<Container>
    <Row>
        <Amadon.Controls.TopNavbar></Amadon.Controls.TopNavbar>

@*        <Column ColumnSize="ColumnSize.Is12">
            <Heading Size="HeadingSize.Is3">Div 1 (5% height)</Heading>
        </Column>
*@    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @switch (InitializationStatus)
            {
                case Status.NotInitialized:
                case Status.LogInitialized:
                case Status.ParametersInitialized:
                    <LogControl @ref="logViewer"></LogControl>
                    break;
                case Status.RepositoryInitialized:
                    <TranslationsChoice></TranslationsChoice>
                    break;
                case Status.ReadyToGo:
                    <LeftColumn @ref=LeftControl ControlName="settings"></LeftColumn>
                    <BookText></BookText>
                    break;
            }
            <Alert Color="@AlertColor" @bind-Visible="@alertVisible">
                <AlertDescription>
                    @AlertDescription
                </AlertDescription>
                <AlertMessage>
                    Inicialization ok.
                </AlertMessage>
                <CloseButton />
            </Alert>
        </Column>
    </Row>


</Container>

@*<Container Class="div2" Border="Border.Danger.OnAll.Is4">
</Container>
*@


    <Modal @ref="modalRef" Animated="animation" AnimationDuration="animationDuration" Border="Border.Is4.Rounded.Warning">
        <ModalContent Size="@modalSize" Centered="@centered">
            <ModalHeader Class="bg-primary">
                <ModalTitle>
                <Icon Name="IconName.InfoCircle" />
                    Get data
                </ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody MaxHeight="@maxHeight" Class="bg-dark text-white">

                @switch (InitializationStatus)
                {
                    case Status.RepositoryInitialized:
                        <TranslationsChoice></TranslationsChoice>
                        break;
                }

            </ModalBody>

            <ModalFooter Class="bg-dark">
                    <Button Color="Color.Secondary" Clicked="@HideModalCancel">Cancel</Button>
                    <Button Color="Color.Primary" Clicked="@HideModalOk">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

@code {

    enum Status
    {
        NotInitialized,
        LogInitialized,
        ParametersInitialized,
        RepositoryInitialized,
        WaitingTranslationChoice,
        TranslationsInitialized,
        ReadyToGo,
        Error
    }

    // Local blazor components
    private LeftColumn LeftControl;
    private LogControl logViewer;

    // Page status control
    private Status InitializationStatus = Status.NotInitialized;

    // Modal parameters
    private Modal modalRef;
    private bool centered = false;
    private ModalSize modalSize = ModalSize.Default;
    private int? maxHeight = null;
    private bool animation = true;
    private int animationDuration = 150;

    // Alert parameters
    bool alertVisible = false;
    string AlertDescription = "";
    string AlertMessage = "";
    Color AlertColor= Color.Success;


    #region Modal routines
    private Task ShowAlert(Color color, string description, string message)
    {
        this.AlertColor = color;
        this.AlertDescription = description;
        this.AlertMessage = message;
        this.alertVisible = true;
        return modalRef.Show();
    }


    private Task ShowModal(ModalSize modalSize, int? maxHeight = null, bool centered = false)
    {
        this.centered = centered;
        this.modalSize = modalSize;
        this.maxHeight = maxHeight;
        return modalRef.Show();
    }

    private Task HideModalCancel()
    {
        InitializationStatus = Status.Error;
        return modalRef.Hide();
    }

    private async Task HideModalOk()
    {
        switch(InitializationStatus)
        {
            case Status.WaitingTranslationChoice:
                InitializationStatus = Status.TranslationsInitialized;
                Status status = await DoInitialization();
                break;
            default:
                InitializationStatus = Status.Error;
                await ShowAlert(Color.Danger, "Error", "Translations choice cancelled. Cannot continue!");
                break;

        }
        await modalRef.Hide();
        return;
    }
    #endregion

    private void HandleSendMessage(string Message)
    {
        //if (Status == Status.InitializedFinished) return;
        logViewer.AppendLogText(Message);
        Task.Delay(1);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        EventsControl.SendMessage += HandleSendMessage;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //await ShowModal(ModalSize.Large, 50, true);
            Status status= await DoInitialization();
            if (status == Status.Error)
            {
                await ShowModal(ModalSize.Large, 50, true);
            }
            else
            {
                InitializationStatus = Status.ReadyToGo;
            }
        }
    }


    #region Initialization

    private async Task<bool> DoInitializeTranslations()
    {
        Diagnostic diagnostic = await InitializationService.InitLeftTranslation(StaticObjects.Parameters.LanguageIDLeftTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitMiddleTranslation(StaticObjects.Parameters.LanguageIDMiddleTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        diagnostic = await InitializationService.InitRightTranslation(StaticObjects.Parameters.LanguageIDRightTranslation);
        if (diagnostic.IsError) HandleSendMessage(diagnostic.Message);
        return true;
    }


    private async Task<Status> DoInitialization(bool recreate = false)
    {
        bool errorOcurred = false, ret = false;

        while(!errorOcurred)
        {
            switch (InitializationStatus)
            {
                case Status.NotInitialized:
                    ret = await InitializationService.InitLooger();
                    if (!ret)
                    {
                        HandleSendMessage("Init logger failed");
                        HandleSendMessage("App cannot be started.");
                        InitializationStatus= Status.Error;
                        errorOcurred = true;
                    }
                    else
                    {
                        InitializationStatus = Status.LogInitialized;
                    }
                    break;
                case Status.LogInitialized:
                    ret = await InitializationService.InitParameters();
                    if (!ret)
                    {
                        HandleSendMessage("Parameters initialization failed");
                        HandleSendMessage("App cannot be started.");
                        InitializationStatus = Status.Error;
                        errorOcurred = true;
                    }
                    else
                    {
                        InitializationStatus = Status.ParametersInitialized;
                    }
                    break;
                case Status.ParametersInitialized:
                    ret = await InitializationService.InitRepositories(recreate);
                    if (!ret)
                    {
                        HandleSendMessage("Repositories initialization failed");
                        HandleSendMessage("App cannot be started.");
                        InitializationStatus = Status.Error;
                        errorOcurred = true;
                    }
                    else
                    {
                        InitializationStatus = Status.RepositoryInitialized;
                    }
                    break;

                case Status.RepositoryInitialized:
                    if (!StaticObjects.Parameters.TranslationsChoiceDone)
                    {
                        await ShowModal(ModalSize.Large, 50, true);
                        return Status.WaitingTranslationChoice;
                    }
                    else
                    {
                        InitializationStatus = Status.TranslationsInitialized;
                    }
                    await ShowModal(ModalSize.Large, 50, true);
                    ret = await InitializationService.InitTranslations();
                    if (!ret)
                    {
                        HandleSendMessage("Translations list initialization failed");
                        HandleSendMessage("App cannot be started.");
                        InitializationStatus = Status.Error;
                        errorOcurred = true;
                    }
                    else
                    {
                        InitializationStatus = Status.TranslationsInitialized;
                        alertVisible = true;
                        await Task.Delay(1);
                        StateHasChanged();
                        return InitializationStatus;
                    }
                    break;
            }
        }

        return InitializationStatus;

        //ret = await DoInitializeTranslations();
        //HandleSendMessage("Init ok");
        //StaticObjects.InitializationDone = true;

    }


    #endregion


}
